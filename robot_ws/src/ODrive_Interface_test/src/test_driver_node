#!/usr/bin/env python

from __future__ import print_function

import rospy
from std_msgs.msg import String
from std_msgs.msg import Int32
import time
import math
from ODrive_Interface_test.srv import *

positions = [0, 0, 0, 0, 0, 0]

plot = rospy.Publisher('plot', Int32, queue_size=10)

def drive_axis(req):
    #print("Driving Axis " + str(req.axis) + ": " + str(req.value*204800/math.pi))
    if req.axis == 1:
        print("Axis " + str(req.axis) + ": " + str(abs(req.value-positions[0])*1024000/math.pi*50) + " -- " + str(req.timestamp))
        plot.publish(abs(req.value-positions[0])*1024000/math.pi*50)
    if req.axis == 2:
        print("Axis " + str(req.axis) + ": " + str(abs(req.value-positions[1])*1024000/math.pi*50) + " -- " + str(req.timestamp))
    if req.axis == 3:
        print("Axis " + str(req.axis) + ": " + str(abs(req.value-positions[2])*204800/math.pi*50) + " -- " + str(req.timestamp))
    if req.axis == 4:
        print("Axis " + str(req.axis) + ": " + str(abs(req.value-positions[3])*204800/math.pi*50) + " -- " + str(req.timestamp))
    if req.axis == 5:
        print("Axis " + str(req.axis) + ": " + str(abs(req.value-positions[4])*204800/math.pi*50) + " -- " + str(req.timestamp))
    if req.axis == 6:
        print("Axis " + str(req.axis) + ": " + str(abs(req.value-positions[5])*204800/math.pi*50) + " -- " + str(req.timestamp))
    positions[req.axis - 1] = req.value
    return driverResponse(True)

def axis_position(req):
    #print("Axis Postition " + str(req.axis) + ": " + str(positions[req.axis - 1]))
    return feedbackResponse(positions[req.axis - 1])


rospy.init_node('driver')

driver = rospy.Service('drive_axis', driver, drive_axis)
feedback = rospy.Service('axis_position', feedback, axis_position)

rospy.spin()
