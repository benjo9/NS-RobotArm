#!/usr/bin/env python

from __future__ import print_function

import rospy
from std_msgs.msg import String
import odrive
from odrive.enums import *
import time
import math

from ODrive_Interface_test.srv import *

print("Connecting...")
#odrv0 = odrive.find_any(serial_number="206E3590524B")
print("Connected to ODrive 0")
odrv1 = odrive.find_any(serial_number="20573882304E")
print("Connected to ODrive 1")
#odrv2 = odrive.find_any(serial_number="20843881304E")
print("Connected to ODrive 2")

print("starting calibration...")
odrv1.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
while odrv1.axis1.current_state != AXIS_STATE_IDLE:
    time.sleep(0.1)

odrv1.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL

def drive_axis(req):
    print("Driving Axis")

    if req.axis == 1:
        odrv1.axis0.controller.input_pos = req.value
    if req.axis == 2:
        odrv0.axis0.controller.input_pos = req.value
    if req.axis == 3:
        odrv0.axis1.controller.input_pos = req.value
    if req.axis == 4:
        odrv2.axis0.controller.input_pos = req.value
    if req.axis == 5:
        odrv2.axis1.controller.input_pos = req.value
    if req.axis == 6:
        odrv1.axis1.controller.input_pos = req.value

    return driverResponse(True)

def axis_position(req):
    print("Axis Postition")

    if req.axis == 1:
        return feedbackResponse(int(round(odrv1.axis0.encoder.pos_estimate)))
    if req.axis == 2:
        return feedbackResponse(int(round(odrv0.axis0.encoder.pos_estimate)))
    if req.axis == 3:
        return feedbackResponse(int(round(odrv0.axis1.encoder.pos_estimate)))
    if req.axis == 4:
        return feedbackResponse(int(round(odrv2.axis0.encoder.pos_estimate)))
    if req.axis == 5:
        return feedbackResponse(int(round(odrv2.axis1.encoder.pos_estimate)))
    if req.axis == 6:
        return feedbackResponse(int(round(odrv1.axis1.encoder.pos_estimate)))

rospy.init_node('driver')

driver = rospy.Service('drive_axis', driver, drive_axis)
feedback = rospy.Service('axis_position', feedback, axis_position)

rospy.spin()


"""
print("starting calibration...")
odrv1.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
while odrv1.axis1.current_state != AXIS_STATE_IDLE:
    time.sleep(0.1)

odrv1.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL

t0 = time.monotonic()
while True:
    setpoint = 100000.0 * math.sin((time.monotonic() - t0)*2)
    print("goto " + str(int(setpoint)))
    odrv1.axis1.controller.input_pos = setpoint
    time.sleep(0.01)

def Axis1_rq_Callback(req):
    command = commandMessage.data
    odrv1.axis0.requested_state = command
rospy.Subscriber('Axis1/requested_state', Int8, Axis1_rq_Callback)
"""
